services:
  postgres:
    container_name: game-2048-postgres-prod
    image: postgres:14-alpine
    restart: unless-stopped
    ports:
      - '${POSTGRES_PORT}:5432'
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - game-network-prod
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  server:
    container_name: game-2048-server-prod
    image: game-2048-server:latest
    restart: unless-stopped
    ports:
      - '${SERVER_PORT}:${SERVER_PORT}'
    environment:
      - NODE_ENV=production
      - SERVER_PORT=${SERVER_PORT}
      - CLIENT_URL=${CLIENT_URL}
      - CLIENT_PORT=${CLIENT_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PORT=5432
      - POSTGRES_HOST=postgres
      - YA_API_URL=${YA_API_URL}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - game-network-prod
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:${SERVER_PORT}/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  client:
    container_name: game-2048-client-prod
    image: game-2048-client:latest
    restart: unless-stopped
    ports:
      - '${CLIENT_PORT}:80'
    environment:
      - NODE_ENV=production
      - CLIENT_PORT=${CLIENT_PORT}
      - SERVER_PORT=${SERVER_PORT}
      - CLIENT_URL=${CLIENT_URL}
    depends_on:
      - server
    networks:
      - game-network-prod
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local

networks:
  game-network-prod:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: game-2048-prod 