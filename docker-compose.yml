services:
  postgres:
    container_name: game-2048-postgres
    image: postgres:14-alpine
    restart: always
    ports:
      - '${POSTGRES_PORT}:5432'
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - game-network

  server:
    container_name: game-2048-server
    image: game-2048-server
    build:
      context: .
      dockerfile: Dockerfile.server
      args:
        SERVER_PORT: ${SERVER_PORT}
    restart: always
    ports:
      - '${SERVER_PORT}:${SERVER_PORT}'
    environment:
      - NODE_ENV=${NODE_ENV}
      - SERVER_PORT=${SERVER_PORT}
      - CLIENT_URL=${CLIENT_URL}
      - CLIENT_PORT=${CLIENT_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PORT=5432
      - POSTGRES_HOST=postgres
      - YA_API_URL=${YA_API_URL}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - game-network

  client:
    container_name: game-2048-client
    image: game-2048-client
    build:
      context: .
      dockerfile: Dockerfile.client
      args:
        CLIENT_PORT: ${CLIENT_PORT}
    restart: always
    ports:
      - '${CLIENT_PORT}:80'
    environment:
      - NODE_ENV=${NODE_ENV}
      - CLIENT_PORT=${CLIENT_PORT}
      - SERVER_PORT=${SERVER_PORT}
      - CLIENT_URL=${CLIENT_URL}
    depends_on:
      - server
    networks:
      - game-network

volumes:
  postgres_data:

networks:
  game-network:
    driver: bridge
